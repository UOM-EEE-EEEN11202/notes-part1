Comments
--------
Comments allow you to add non-executable information into your .c file. Generally they are used for explaining what the code is doing and why, to keep track of what this unit of code is for, and to explain anything which might not be obvious. Sometimes they are used to deactivate code that you have written, but don't want to be part of the program at the moment (for whatever reason).

Comments aren't a substitute for good documentation, as they can only be text (no diagrams or similar) and they sit at a particular place in your code and so generally explain what's happening only there, rather than giving the big picture. Nevertheless, comments are an essential part of any code.

In C there are two ways of adding comments:
* will start a comment for the rest of the line. Anything after this will be ignored by the compiler and will be for your information only.
* Text inside a block starting with and ending with will be a comment. This lets you add lots of text, without having to start every line with a comment command. 

Examples of C comments might be:



Documentation generators
------------------------
We noted previously that comments in the code aren't a substitute for good documentation. Generally comments are quite low level, giving details on exactly what that piece of code is aiming to do and any hints needed to understand complicated operations. In contract, documentation is generally higher level, explaining the overall architecture and design choices made, and explaining how a user should interact with the program to use it correctly. 

You can just write documentation in a word processor such as Microsoft Word or Google Docs and store the file(s) together with the source code for your program. Alternatively, there are lots of dedicated tools available to help you write and maintain the documentation. These dedicated tools more closely link the code and the documentation and so can provide additional features, such as the ability run tests on any examples given the documentation. This is very helpful to ensure the examples are correct! Using dedicated documentation tools can also help to keep the code and its documentation synchronised as updates are applied to the code. 

As one example, Sphinx takes documentation written as text and converts it to be an interactive website which can include code examples and other features. It is used in website such as Read the Docs which is commonly used to share documentation for open source programs. 

Alternatively, DOxygen takes comments in the code file and converts them to be a website, which can include text and code, and have hyperlinks to move between different functions. This has the advantage that there isn't a separate documentation file to maintain, everything (code and documentation) is in the one file. (Which then has the disadvantage of this one place potentially being a messy mixture of code and documentation, which may make it harder to see the underlying code and where the important bits are.)

The different tools available each have their own syntax and detailed methods of using them. As we're only looking at introductory, short, programs we won't use documentation tools in this course. Comments in our code will suffice for now. As you start to move to bigger programs you may like to explore some of the tools listed above (and others you find online, there are many alternatives). 

In general, many documentation tools support the syntax of using three forward slashes (rather than the two used in a normal comment) to indicate this is a piece of documentation to be put on the website, rather than a comment on the underlying code. For example, you might see code like: